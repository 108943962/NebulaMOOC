<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "address://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nebula.mooc.webserver.dao.PostDao">
    <resultMap id="PostMap" type="Post">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="userId" column="USER_ID" jdbcType="BIGINT"/>
        <result property="nickName" column="NICKNAME" jdbcType="VARCHAR"/>
        <result property="kindName" column="KIND_NAME" jdbcType="VARCHAR"/>
        <result property="title" column="TITLE" jdbcType="VARCHAR"/>
        <result property="content" column="CONTENT" jdbcType="CLOB"/>
        <result property="createdTime" column="CREATED_TIME" jdbcType="TIMESTAMP"/>
        <result property="headimg" column="HEAD_IMG" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="onePostMap" type="Post">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="userId" column="USER_ID" jdbcType="BIGINT"/>
        <result property="nickName" column="NICKNAME" jdbcType="VARCHAR"/>
        <result property="kindName" column="KIND_NAME" jdbcType="VARCHAR"/>
        <result property="title" column="TITLE" jdbcType="VARCHAR"/>
        <result property="content" column="CONTENT" jdbcType="CLOB"/>
        <result property="createdTime" column="CREATED_TIME" jdbcType="TIMESTAMP"/>
        <result property="headimg" column="HEAD_URL" jdbcType="VARCHAR"/>
        <result property="ifLike" column="IFLIKE" jdbcType="TIMESTAMP"/>
        <result property="like" column="LIKE" jdbcType="INTEGER"/>
    </resultMap>

    <resultMap id="CommitMap" type="Reply">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="fromId" column="USER_ID" jdbcType="BIGINT"/>
        <result property="content" column="CONTENT" jdbcType="CLOB"/>
        <result property="star" column="STAR" jdbcType="INTEGER"/>
        <result property="createdTime" column="CREATED_TIME" jdbcType="TIMESTAMP"/>
        <result property="fromName" column="NICKNAME" jdbcType="VARCHAR"/>
        <result property="ifStar" column="IFSTAR" jdbcType="TIMESTAMP"/>
        <result property="headimg" column="HEAD_URL" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="ReplyMap" type="Reply">
        <id property="id" column="id" jdbcType="BIGINT"/>
        <result property="commitId" column="COMMIT_ID" jdbcType="BIGINT"/>
        <result property="fromId" column="FROM_ID" jdbcType="BIGINT"/>
        <result property="toId" column="TO_ID" jdbcType="BIGINT"/>
        <result property="content" column="CONTENT" jdbcType="CLOB"/>
        <result property="createdTime" column="CREATED_TIME" jdbcType="TIMESTAMP"/>
        <result property="fromName" column="fname" jdbcType="VARCHAR"/>
        <result property="toName" column="sname" jdbcType="VARCHAR"/>
    </resultMap>

    <insert id="newPost" parameterType="Post">
        insert into post (USER_ID, KIND_NAME, TITLE, CONTENT)
        values (#{userId}, #{kindName}, #{title}, #{content})
    </insert>

    <delete id="delPost" parameterType="Post">
        delete from post where ID=#{id} and USER_ID=#{userId}
    </delete>

    <select id="showPost" resultMap="onePostMap" parameterType="Post">
        select
        post.USER_ID,post.KIND_NAME,post.TITLE,post.CONTENT,post.CREATED_TIME,user.NICKNAME,user.HEAD_URL,post_like.CREATED_TIME
        IFLIKE,post.LIKE
        FROM user,post left join post_like on post_like.USER_ID=#{userId} and post_like.POST_ID=post.ID
        WHERE post.ID=#{id} and post.USER_ID=user.ID
    </select>

    <select id="showPostList" resultMap="PostMap" parameterType="Page">
        select post.ID,post.USER_ID,post.KIND_NAME,post.TITLE,post.CONTENT,post.CREATED_TIME,user.NICKNAMEï¼Œuser.HEAD_URL
        FROM post,user
        WHERE post.USER_ID=user.ID and post.ID>=(select post.ID from post limit #{offset},1)
        limit #{pageSize}
    </select>

    <select id="getCommit" resultMap="CommitMap" parameterType="Page">
        select
        post_commit.ID,post_commit.USER_ID,post_commit.CONTENT,post_commit.STAR,post_commit.CREATED_TIME,
        user.NICKNAME,user.HEAD_URL,post_star.CREATED_TIME IFSTAR
        from user,post_commit left join post_star on post_star.USER_ID=#{userId} and post_star.COMMIT_ID=post_commit.ID
        where user.ID=post_commit.USER_ID and post_commit.POST_ID=#{id} and post_commit.ID>=(select post_commit.ID from
        post_commit
        limit #{offset},1)limit #{pageSize}
    </select>

    <select id="getReply" resultMap="ReplyMap" parameterType="Reply">
        select t1.ID,t1.COMMIT_ID,t1.FROM_ID,t1.FROM_ID,t1.TO_ID,t1.CONTENT,t1.CREATED_TIME,t1.NICKNAME
        fname,user.NICKNAME sname from
        (select post_commit_reply.ID,post_commit_reply.COMMIT_ID,post_commit_reply.FROM_ID,post_commit_reply.TO_ID,
        post_commit_reply.CONTENT,post_commit_reply.CREATED_TIME,user.NICKNAME
        from post_commit_reply,user
        where user.ID=post_commit_reply.FROM_ID and post_commit_reply.COMMIT_ID=#{id})t1,user
        where t1.TO_ID=user.ID
    </select>

    <insert id="postLike" parameterType="Post">
        insert into post_like(USER_ID,POST_ID)
        values (#{userId},#{id})
    </insert>

    <update id="addLike" parameterType="Post">
        update post set post.LIKE = post.LIKE+1 where post.ID=#{id}
    </update>

    <update id="subLike" parameterType="Post">
        update post set post.LIKE = post.LIKE-1 where ID=#{id}
    </update>

    <delete id="delLike" parameterType="Post">
        delete from post_like where POST_ID=#{id} and USER_ID=#{userId}
    </delete>

    <insert id="commit" parameterType="Reply">
        insert into post_commit(USER_ID,POST_ID,CONTENT)
        values (#{fromId},#{postId},#{content})
    </insert>

    <delete id="delCommit" parameterType="Reply">
        delete from post_commit where ID=#{id} and USER_ID=#{fromId}
    </delete>

    <insert id="replyCommit" parameterType="Reply">
        insert into post_commit_reply(COMMIT_ID,FROM_ID,TO_ID,CONTENT)
        values (#{commitId},#{fromId},#{toId},#{content})
    </insert>

    <delete id="delReplyCommit" parameterType="Reply">
        delete from post_commit_reply where ID=#{id} and FROM_ID=#{fromId}
    </delete>

    <select id="ifStar" parameterType="Reply" resultType="java.lang.Integer">
        select ifnull((select 1 from post_star where USER_ID=#{fromId} and COMMIT_ID=#{id} limit 1),0)
    </select>

    <select id="ifLike" parameterType="Post" resultType="java.lang.Integer">
        select ifnull((select 1 from post_like where USER_ID=#{userId} and POST_ID=#{id} limit 1),0)
    </select>

    <update id="replyStar" parameterType="Reply">
        update post_commit set STAR = STAR+1 where ID=#{id}
    </update>

    <insert id="markStar" parameterType="Reply">
        insert into post_star(USER_ID, COMMIT_ID) values (#{fromId},#{id})
    </insert>

    <update id="delReplyStar" parameterType="Reply">
        update post_commit set STAR = STAR-1 where ID=#{id}
    </update>

    <delete id="delMarkStar" parameterType="Reply">
        delete from post_star where USER_ID=#{fromId} and COMMIT_ID=#{id}
    </delete>

    <select id="lastReplyId" resultType="java.lang.Integer">
        SELECT LAST_INSERT_ID();
    </select>

    <select id="postTotal" resultType="java.lang.Integer">
        select count(*) from post
    </select>

    <select id="commitTotal" resultType="java.lang.Integer" parameterType="Page">
        select count(*) from post_commit where POST_ID=#{id}
    </select>


</mapper>